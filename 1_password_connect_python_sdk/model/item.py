# coding: utf-8

"""
    1Password Connect

    REST API interface for 1Password Connect.

    The version of the OpenAPI document: 1.5.7
    Contact: support@1password.com
    Created by: https://support.1password.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 1_password_connect_python_sdk import schemas  # noqa: F401


class Item(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "category",
            "vault",
        }
        
        class properties:
        
            @staticmethod
            def vault() -> typing.Type['ItemVault']:
                return ItemVault
            
            
            class category(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "LOGIN": "LOGIN",
                        "PASSWORD": "PASSWORD",
                        "API_CREDENTIAL": "API_CREDENTIAL",
                        "SERVER": "SERVER",
                        "DATABASE": "DATABASE",
                        "CREDIT_CARD": "CREDIT_CARD",
                        "MEMBERSHIP": "MEMBERSHIP",
                        "PASSPORT": "PASSPORT",
                        "SOFTWARE_LICENSE": "SOFTWARE_LICENSE",
                        "OUTDOOR_LICENSE": "OUTDOOR_LICENSE",
                        "SECURE_NOTE": "SECURE_NOTE",
                        "WIRELESS_ROUTER": "WIRELESS_ROUTER",
                        "BANK_ACCOUNT": "BANK_ACCOUNT",
                        "DRIVER_LICENSE": "DRIVER_LICENSE",
                        "IDENTITY": "IDENTITY",
                        "REWARD_PROGRAM": "REWARD_PROGRAM",
                        "DOCUMENT": "DOCUMENT",
                        "EMAIL_ACCOUNT": "EMAIL_ACCOUNT",
                        "SOCIAL_SECURITY_NUMBER": "SOCIAL_SECURITY_NUMBER",
                        "MEDICAL_RECORD": "MEDICAL_RECORD",
                        "SSH_KEY": "SSH_KEY",
                        "CUSTOM": "CUSTOM",
                    }
                
                @schemas.classproperty
                def LOGIN(cls):
                    return cls("LOGIN")
                
                @schemas.classproperty
                def PASSWORD(cls):
                    return cls("PASSWORD")
                
                @schemas.classproperty
                def API_CREDENTIAL(cls):
                    return cls("API_CREDENTIAL")
                
                @schemas.classproperty
                def SERVER(cls):
                    return cls("SERVER")
                
                @schemas.classproperty
                def DATABASE(cls):
                    return cls("DATABASE")
                
                @schemas.classproperty
                def CREDIT_CARD(cls):
                    return cls("CREDIT_CARD")
                
                @schemas.classproperty
                def MEMBERSHIP(cls):
                    return cls("MEMBERSHIP")
                
                @schemas.classproperty
                def PASSPORT(cls):
                    return cls("PASSPORT")
                
                @schemas.classproperty
                def SOFTWARE_LICENSE(cls):
                    return cls("SOFTWARE_LICENSE")
                
                @schemas.classproperty
                def OUTDOOR_LICENSE(cls):
                    return cls("OUTDOOR_LICENSE")
                
                @schemas.classproperty
                def SECURE_NOTE(cls):
                    return cls("SECURE_NOTE")
                
                @schemas.classproperty
                def WIRELESS_ROUTER(cls):
                    return cls("WIRELESS_ROUTER")
                
                @schemas.classproperty
                def BANK_ACCOUNT(cls):
                    return cls("BANK_ACCOUNT")
                
                @schemas.classproperty
                def DRIVER_LICENSE(cls):
                    return cls("DRIVER_LICENSE")
                
                @schemas.classproperty
                def IDENTITY(cls):
                    return cls("IDENTITY")
                
                @schemas.classproperty
                def REWARD_PROGRAM(cls):
                    return cls("REWARD_PROGRAM")
                
                @schemas.classproperty
                def DOCUMENT(cls):
                    return cls("DOCUMENT")
                
                @schemas.classproperty
                def EMAIL_ACCOUNT(cls):
                    return cls("EMAIL_ACCOUNT")
                
                @schemas.classproperty
                def SOCIAL_SECURITY_NUMBER(cls):
                    return cls("SOCIAL_SECURITY_NUMBER")
                
                @schemas.classproperty
                def MEDICAL_RECORD(cls):
                    return cls("MEDICAL_RECORD")
                
                @schemas.classproperty
                def SSH_KEY(cls):
                    return cls("SSH_KEY")
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("CUSTOM")
        
            @staticmethod
            def tags() -> typing.Type['ItemTags']:
                return ItemTags
            title = schemas.StrSchema
            version = schemas.IntSchema
            
            
            class id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[\da-z]{26}$',
                    }]
        
            @staticmethod
            def urls() -> typing.Type['ItemUrls']:
                return ItemUrls
            favorite = schemas.BoolSchema
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ARCHIVED": "ARCHIVED",
                        "DELETED": "DELETED",
                    }
                
                @schemas.classproperty
                def ARCHIVED(cls):
                    return cls("ARCHIVED")
                
                @schemas.classproperty
                def DELETED(cls):
                    return cls("DELETED")
            createdAt = schemas.DateTimeSchema
            updatedAt = schemas.DateTimeSchema
            lastEditedBy = schemas.StrSchema
            __annotations__ = {
                "vault": vault,
                "category": category,
                "tags": tags,
                "title": title,
                "version": version,
                "id": id,
                "urls": urls,
                "favorite": favorite,
                "state": state,
                "createdAt": createdAt,
                "updatedAt": updatedAt,
                "lastEditedBy": lastEditedBy,
            }
    
    category: MetaOapg.properties.category
    vault: 'ItemVault'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vault"]) -> 'ItemVault': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'ItemTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["urls"]) -> 'ItemUrls': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["favorite"]) -> MetaOapg.properties.favorite: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastEditedBy"]) -> MetaOapg.properties.lastEditedBy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["vault", "category", "tags", "title", "version", "id", "urls", "favorite", "state", "createdAt", "updatedAt", "lastEditedBy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vault"]) -> 'ItemVault': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['ItemTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["urls"]) -> typing.Union['ItemUrls', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["favorite"]) -> typing.Union[MetaOapg.properties.favorite, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastEditedBy"]) -> typing.Union[MetaOapg.properties.lastEditedBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["vault", "category", "tags", "title", "version", "id", "urls", "favorite", "state", "createdAt", "updatedAt", "lastEditedBy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        category: typing.Union[MetaOapg.properties.category, str, ],
        vault: 'ItemVault',
        tags: typing.Union['ItemTags', schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        urls: typing.Union['ItemUrls', schemas.Unset] = schemas.unset,
        favorite: typing.Union[MetaOapg.properties.favorite, bool, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, schemas.Unset] = schemas.unset,
        lastEditedBy: typing.Union[MetaOapg.properties.lastEditedBy, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Item':
        return super().__new__(
            cls,
            *args,
            category=category,
            vault=vault,
            tags=tags,
            title=title,
            version=version,
            id=id,
            urls=urls,
            favorite=favorite,
            state=state,
            createdAt=createdAt,
            updatedAt=updatedAt,
            lastEditedBy=lastEditedBy,
            _configuration=_configuration,
            **kwargs,
        )

from 1_password_connect_python_sdk.model.item_tags import ItemTags
from 1_password_connect_python_sdk.model.item_urls import ItemUrls
from 1_password_connect_python_sdk.model.item_vault import ItemVault
