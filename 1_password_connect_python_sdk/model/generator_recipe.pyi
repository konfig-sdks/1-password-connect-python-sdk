# coding: utf-8

"""
    1Password Connect

    REST API interface for 1Password Connect.

    The version of the OpenAPI document: 1.5.7
    Contact: support@1password.com
    Created by: https://support.1password.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 1_password_connect_python_sdk import schemas  # noqa: F401


class GeneratorRecipe(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The recipe is used in conjunction with the "generate" property to set the character set used to generate a new secure value
    """


    class MetaOapg:
        
        class properties:
            
            
            class length(
                schemas.IntSchema
            ):
                pass
        
            @staticmethod
            def characterSets() -> typing.Type['GeneratorRecipeCharacterSets']:
                return GeneratorRecipeCharacterSets
            excludeCharacters = schemas.StrSchema
            __annotations__ = {
                "length": length,
                "characterSets": characterSets,
                "excludeCharacters": excludeCharacters,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length"]) -> MetaOapg.properties.length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["characterSets"]) -> 'GeneratorRecipeCharacterSets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excludeCharacters"]) -> MetaOapg.properties.excludeCharacters: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["length", "characterSets", "excludeCharacters", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length"]) -> typing.Union[MetaOapg.properties.length, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["characterSets"]) -> typing.Union['GeneratorRecipeCharacterSets', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excludeCharacters"]) -> typing.Union[MetaOapg.properties.excludeCharacters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["length", "characterSets", "excludeCharacters", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        length: typing.Union[MetaOapg.properties.length, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        characterSets: typing.Union['GeneratorRecipeCharacterSets', schemas.Unset] = schemas.unset,
        excludeCharacters: typing.Union[MetaOapg.properties.excludeCharacters, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GeneratorRecipe':
        return super().__new__(
            cls,
            *args,
            length=length,
            characterSets=characterSets,
            excludeCharacters=excludeCharacters,
            _configuration=_configuration,
            **kwargs,
        )

from 1_password_connect_python_sdk.model.generator_recipe_character_sets import GeneratorRecipeCharacterSets
