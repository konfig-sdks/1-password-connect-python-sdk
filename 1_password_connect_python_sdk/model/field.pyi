# coding: utf-8

"""
    1Password Connect

    REST API interface for 1Password Connect.

    The version of the OpenAPI document: 1.5.7
    Contact: support@1password.com
    Created by: https://support.1password.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from 1_password_connect_python_sdk import schemas  # noqa: F401


class Field(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "id",
            "type",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("STRING")
                
                @schemas.classproperty
                def EMAIL(cls):
                    return cls("EMAIL")
                
                @schemas.classproperty
                def CONCEALED(cls):
                    return cls("CONCEALED")
                
                @schemas.classproperty
                def URL(cls):
                    return cls("URL")
                
                @schemas.classproperty
                def TOTP(cls):
                    return cls("TOTP")
                
                @schemas.classproperty
                def DATE(cls):
                    return cls("DATE")
                
                @schemas.classproperty
                def MONTH_YEAR(cls):
                    return cls("MONTH_YEAR")
                
                @schemas.classproperty
                def MENU(cls):
                    return cls("MENU")
        
            @staticmethod
            def section() -> typing.Type['FieldSection']:
                return FieldSection
            
            
            class purpose(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
                
                @schemas.classproperty
                def USERNAME(cls):
                    return cls("USERNAME")
                
                @schemas.classproperty
                def PASSWORD(cls):
                    return cls("PASSWORD")
                
                @schemas.classproperty
                def NOTES(cls):
                    return cls("NOTES")
            label = schemas.StrSchema
            value = schemas.StrSchema
            generate = schemas.BoolSchema
        
            @staticmethod
            def recipe() -> typing.Type['GeneratorRecipe']:
                return GeneratorRecipe
            entropy = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "type": type,
                "section": section,
                "purpose": purpose,
                "label": label,
                "value": value,
                "generate": generate,
                "recipe": recipe,
                "entropy": entropy,
            }
    
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section"]) -> 'FieldSection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purpose"]) -> MetaOapg.properties.purpose: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generate"]) -> MetaOapg.properties.generate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recipe"]) -> 'GeneratorRecipe': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entropy"]) -> MetaOapg.properties.entropy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "type", "section", "purpose", "label", "value", "generate", "recipe", "entropy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section"]) -> typing.Union['FieldSection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purpose"]) -> typing.Union[MetaOapg.properties.purpose, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generate"]) -> typing.Union[MetaOapg.properties.generate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recipe"]) -> typing.Union['GeneratorRecipe', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entropy"]) -> typing.Union[MetaOapg.properties.entropy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "type", "section", "purpose", "label", "value", "generate", "recipe", "entropy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        section: typing.Union['FieldSection', schemas.Unset] = schemas.unset,
        purpose: typing.Union[MetaOapg.properties.purpose, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        generate: typing.Union[MetaOapg.properties.generate, bool, schemas.Unset] = schemas.unset,
        recipe: typing.Union['GeneratorRecipe', schemas.Unset] = schemas.unset,
        entropy: typing.Union[MetaOapg.properties.entropy, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Field':
        return super().__new__(
            cls,
            *args,
            id=id,
            type=type,
            section=section,
            purpose=purpose,
            label=label,
            value=value,
            generate=generate,
            recipe=recipe,
            entropy=entropy,
            _configuration=_configuration,
            **kwargs,
        )

from 1_password_connect_python_sdk.model.field_section import FieldSection
from 1_password_connect_python_sdk.model.generator_recipe import GeneratorRecipe
